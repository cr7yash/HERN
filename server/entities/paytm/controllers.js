import axios from "axios";
import PAYTMCHECKSUM from "paytmchecksum";

// start transaction for native flow with paytm
export const initiateTransaction = async (req, res) => {
  var paytmParams = {};

  paytmParams.body = {
    requestType: "Payment",
    mid: process.env.PAYTM_MERCHANT_ID, // merchant id from paytm
    websiteName: process.env.PAYTM_WEBSITE,
    orderId: `ORDERID_${new Date().getTime()}`, // unique order id generated by merchant
    callbackUrl: "http:localhost:5000/paytm/response",
    txnAmount: {
      value: "1.00",
      currency: "INR",
    },
    userInfo: {
      custId: `CUST_${new Date().getTime()}`, // unique customer id generated by merchant
    },
  };

  const generatedChecksumHas = await PAYTMCHECKSUM.generateSignature(
    JSON.stringify(paytmParams.body),
    process.env.PAYTM_MERCHANT_KEY
  );

  paytmParams.head = {
    signature: generatedChecksumHas,
  };

  console.log("orderId", paytmParams.body.orderId);
  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/theia/api/v1/initiateTransaction?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${paytmParams.body.orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

// updates txnAmount , goods , shippingInfo , extendInfo in order details in Native flow.
export const updateTransaction = async (req, res) => {
  const { orderId, txnToken } = req.body;
  var paytmParams = {};

  paytmParams.body = {
    txnAmount: {
      value: "10.00",
      currency: "INR",
    },
    userInfo: {
      custId: `CUST_${new Date().getTime()}`,
    },
  };

  const generatedChecksumHas = await PAYTMCHECKSUM.generateSignature(
    JSON.stringify(paytmParams.body),
    process.env.PAYTM_MERCHANT_KEY
  );

  paytmParams.head = {
    txnToken: txnToken,
    signature: generatedChecksumHas,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/theia/api/v1/updateTransactionDetail?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

// fetch payment options available for the transaction from paytm
export const fetchPaymentOptions = async (req, res) => {
  const { orderId, txnToken } = req.body;
  var paytmParams = {};

  paytmParams.body = {
    mid: process.env.PAYTM_MERCHANT_ID,
  };

  paytmParams.head = {
    tokenType: "TXN_TOKEN",
    txnToken: txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/theia/api/v2/fetchPaymentOptions?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

// access the cards saved (local or global vault cards) in your customer’s Paytm account
export const getSavedCard = async (req, res) => {
  const { paytmCustomerId, customer_SSO_Token } = req.body;

  if (!paytmCustomerId || !customer_SSO_Token)
    return res.status(400).json({
      message: "Please provide paytmCustomerId and customer_SSO_Token",
    });

  var paytmParams = {
    MID: process.env.PAYTM_MERCHANT_ID,
    REQUEST_TYPE: "DEFAULT",
    SSO_TOKEN: customer_SSO_Token, //Unique token linked with the user's Paytm account
    CUSTID: paytmCustomerId, //Unique Id issued to the customer by Paytm for which the merchant has requested the saved cards details.
  };

  const generatedChecksumHas = await PAYTMCHECKSUM.generateSignature(
    JSON.stringify(paytmParams.body),
    process.env.PAYTM_MERCHANT_KEY
  );

  paytmParams["CHECKSUM"] = generatedChecksumHas;
  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/savedcardservice/merchant/v1/get/card`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

// fetch convenience charges corresponding to the Transaction amount for different payment instruments.
export const fetchPcfDetails = async (req, res) => {
  const { payMethods = [], txnToken, orderId } = req.body;
  var paytmParams = {};

  if (payMethods.length === 0 || !txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message: "Please provide payMethods, txnToken and orderId",
    });
  paytmParams.body = {
    payMethods, // List of payment methods (object) for convenience charges. For example, [{"payMethod" : "CREDIT_CARD","instId" : "VISA"}]
  };

  paytmParams.head = {
    txnToken: txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/theia/api/v1/fetchPcfDetails?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

// check if the BIN entered by the user is a valid card BIN from which Paytm can process a payment
export const fetchBinDetail = async (req, res) => {
  const { bin, txnToken, orderId } = req.body;
  var paytmParams = {};

  if (!bin || !txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message: "Please provide bin, txnToken and orderId",
    });
  paytmParams.body = {
    bin, // Starting 6 digits of credit or debit card number like 411111
  };

  paytmParams.head = {
    tokenType: "TXN_TOKEN",
    token: txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/fetchBinDetail?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

// send OTP to the customer’s mobile number for login into Paytm ecosystem. This OTP is valid for 2 minutes.
export const sendOtp = async (req, res) => {
  const { mobileNumber, txnToken, orderId } = req.body;
  var paytmParams = {};

  if (!mobileNumber || !txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message: "Please provide mobileNumber, txnToken and orderId",
    });
  paytmParams.body = {
    mobileNumber, // 10 digit user mobile No
  };

  paytmParams.head = {
    txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/login/sendOtp?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

// validate the OTP entered by user to complete authentication for login into Paytm ecosystem
export const validateOtp = async (req, res) => {
  const { otp, txnToken, orderId } = req.body;
  var paytmParams = {};

  if (!otp || !txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message: "Please provide otp, txnToken and orderId",
    });
  paytmParams.body = {
    otp, // OTP sent to user
  };

  paytmParams.head = {
    txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/login/validateOtp?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

// get the balance of Paytm Wallet, Paytm Postpaid and Paytm Payments Bank.
export const fetchBalanceInfo = async (req, res) => {
  const { txnToken, orderId } = req.body;
  var paytmParams = {};

  if (!txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message: "Please provide txnToken and orderId",
    });
  paytmParams.body = {
    paymentMode: "BALANCE", // Paytm payment mode for which you need to fetch balance.
  };

  paytmParams.head = {
    txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/userAsset/fetchBalanceInfo?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

//  list of Net Banking instruments with their success rate and icons , configured for given MID along with user addAndPay payment instruments
export const fetchNBPaymentChannels = async (req, res) => {
  const { txnToken, orderId } = req.body;
  var paytmParams = {};

  if (!txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message: "Please provide txnToken and orderId",
    });
  paytmParams.body = {
    type: "MERCHANT", // Channel list as per the transaction flow.
  };

  paytmParams.head = {
    tokenType: "TXN_TOKEN",
    txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/theia/api/v1/fetchNBPaymentChannels?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

//  fetches the list of emi details like tenure, interest rates, min and max amount for requested channel configured for given MID
export const fetchEMIDetail = async (req, res) => {
  const { channelCode, txnToken, orderId } = req.body;
  var paytmParams = {};

  if (!channelCode || !txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message: "Please provide channelCode, txnToken and orderId",
    });
  paytmParams.body = {
    channelCode, // Channel list as per the transaction flow.
  };

  paytmParams.head = {
    txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/fetchEMIDetail?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

//   validate user VPA address in case UPI collect flow.
export const validateVpa = async (req, res) => {
  const { vpa, txnToken, orderId } = req.body;
  var paytmParams = {};

  if (!vpa || !txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message: "Please provide vpa, txnToken and orderId",
    });
  paytmParams.body = {
    vpa, // User VPA address
  };

  paytmParams.head = {
    tokenType: "TXN_TOKEN",
    txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/theia/api/v1/vpa/validate?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};

//   process the transaction with respect to paymentMode provided by merchant in the request
export const processTransaction = async (req, res) => {
  const { paymentMode, txnToken, orderId, cardInfo, authMode } = req.body;
  var paytmParams = {};

  if (!vpa || !txnToken || !orderId)
    return res.status(400).json({
      status: false,
      message:
        "Please provide paymentMode,cardInfo,authMode, txnToken and orderId",
    });
  paytmParams.body = {
    requestType: "NATIVE",
    mid: process.env.PAYTM_MERCHANT_ID,
    orderId,
    paymentMode, // payment mode used by customer for transaction.
    cardInfo, // details of the saved and new card format:cardInfo: saveCardId|cardNo|cvv|expDate.
    authMode, // Authentication mode for cards
  };

  paytmParams.head = {
    txnToken,
  };

  const { data } = await axios({
    url: `https://securegw-stage.paytm.in/theia/api/v1/processTransaction?mid=${process.env.PAYTM_MERCHANT_ID}&orderId=${orderId}`,
    data: paytmParams,
    headers: {
      "Content-Type": "application/json",
    },
    method: "POST",
  });
  res.status(200).json(data);
};
